/**
 * Fetches a Bearer Token for the Domain API
 * @param clientId A client ID from the Domain website
 * @param secret A client secret from the Domain website
 * @returns A Bearer token used to interact with Domain's API
 */
export const getAccessToken = async (
  clientId: string,
  secret: string
): Promise<string> => {
  const authCredentials = btoa(`${clientId}:${secret}`);
  const headers = new Headers();
  const query = new URLSearchParams();

  query.append("grant_type", "client_credentials");
  query.append("scope", "api_agencies_read api_listings_read");

  headers.append("Authorization", `Basic ${authCredentials}`);
  headers.append("Content-Type", "application/x-www-form-urlencoded");

  const response = await fetch(`https://auth.domain.com.au/v1/connect/token`, {
    method: "POST",
    headers: headers,
    body: query,
  });

  const keys = await response.json();

  return keys.access_token;
};

export interface PropertySearchResult {
  id: number;
  address: string;
  bathrooms: number;
  bedrooms: number;
  carspaces: number;
  imageUrl: string;
}

/**
 * Fetches a list of properties from the Domain API
 * @param accessToken Access token generated by getAccessToken
 * @param suburb A suburb string, e.g. Hawthorn, Richmond, Fitzroy
 * @returns A list of properties with their addresses and IDs
 */
export const searchProperties = async (
  accessToken: string,
  suburb: string
): Promise<PropertySearchResult[]> => {
  const headers = new Headers();
  headers.append("Authorization", `Bearer ${accessToken}`);
  headers.append("Content-Type", "application/json");

  const response = await fetch(
    "https://api.domain.com.au/v1/listings/residential/_search",
    {
      method: "POST",
      body: JSON.stringify({
        listingType: "Sale",
        propertyTypes: ["House"],
        locations: [
          {
            state: "VIC",
            suburb: suburb,
          },
        ],
      }),
      headers: headers,
    }
  );

  const json = await response.json();

  console.log(json);
  

  return json.map((prop: any): PropertySearchResult => {
    return {
      id: prop.listing.id,
      address: prop.listing.propertyDetails.displayableAddress,
      bathrooms: prop.listing.propertyDetails.bathrooms,
      bedrooms: prop.listing.propertyDetails.bedrooms,
      carspaces: prop.listing.propertyDetails.carspaces ?? 0,
      imageUrl: prop.listing.media.find((media: any) => media.category === "Image").url ?? ""
    };
  });
};
